/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/service/add": {
    /**
     * add a new service
     * @description add a new service
     */
    post: operations["createService"];
  };
  "/service/{id}/activate": {
    /**
     * activate a new service
     * @description activate a new service
     */
    put: operations["activateServiceById"];
  };
  "/service/{id}/deactivate": {
    /**
     * deactivate a new service
     * @description deactivate a new service
     */
    put: operations["deactivateServiceById"];
  };
  "/services": {
    /**
     * get all services
     * @description get all services
     */
    get: operations["getAllServices"];
  };
  "/service/{id}": {
    /**
     * get a service
     * @description get an service
     */
    get: operations["getServiceById"];
    /**
     * update service
     * @description update service
     */
    put: operations["updateService"];
  };
  "/post/add": {
    /**
     * add a new post
     * @description add a new post
     */
    post: operations["createPost"];
  };
  "/post/{id}/activate": {
    /**
     * activate a new post
     * @description activate a new post
     */
    put: operations["activatePostById"];
  };
  "/post/{id}/deactivate": {
    /**
     * deactivate a new post
     * @description deactivate a new post
     */
    put: operations["deactivatePostById"];
  };
  "/posts": {
    /**
     * get all posts
     * @description get all posts
     */
    get: operations["getAllPosts"];
  };
  "/post/{id}": {
    /**
     * get a post
     * @description get a post
     */
    get: operations["getPostById"];
    /**
     * update post
     * @description update post
     */
    put: operations["updatePost"];
  };
  "/employee/add": {
    /**
     * add a new employee
     * @description add a new employee
     */
    post: operations["createEmployee"];
  };
  "/employees": {
    /**
     * get all employees
     * @description get all employees
     */
    get: operations["getAllEmployees"];
  };
  "/employee/{id}": {
    /**
     * get an employee
     * @description get an employee
     */
    get: operations["getEmployeeById"];
    /**
     * update employee
     * @description update employee
     */
    put: operations["updateEmployee"];
  };
  "/role/add": {
    /**
     * add a new role
     * @description add a new role
     */
    post: operations["createRole"];
  };
  "/role/{id}": {
    /**
     * get an role
     * @description get an role
     */
    get: operations["getRoleById"];
    /**
     * update role
     * @description update role
     */
    put: operations["updateRole"];
  };
  "/roles": {
    /**
     * get all roles
     * @description get all roles
     */
    get: operations["getAllRoles"];
  };
  "/role/{id}/assign-permissions": {
    /**
     * assign permissions to role
     * @description assign permissions to role
     */
    put: operations["assignPermissionToRoleId"];
  };
  "/role/{id}/activate": {
    /**
     * activate a new role
     * @description activate a new role
     */
    put: operations["activateRoleById"];
  };
  "/role/{id}/deactivate": {
    /**
     * deactivate a new role
     * @description deactivate a new role
     */
    put: operations["deactivateRoleById"];
  };
  "/holidayRequest/add": {
    /**
     * create a new holiday request
     * @description create a new holiday request
     */
    post: operations["createHolidayRequest"];
  };
  "/holidayRequest/{id}": {
    /**
     * get an holiday request
     * @description get an holiday request
     */
    get: operations["getHolidayRequestById"];
    /**
     * update holiday request
     * @description update holiday request
     */
    put: operations["updateHolidayRequest"];
  };
  "/holidayRequest": {
    /**
     * get all holiday requests
     * @description get all holiday requests
     */
    get: operations["getAllHolidayRequest"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    EmployeeDTO: {
      /**
       * Format: uuid
       * @description identifier the user id
       */
      id?: string;
      /** @description user firstname */
      firstname?: string;
      /** @description user lastname */
      lastName?: string;
      /** @description user password */
      password?: string;
      /** @description user email */
      email?: string;
      /**
       * Format: date-time
       * @description user arriving date
       */
      createdAt?: string;
      /**
       * Format: date-time
       * @description user updating date
       */
      updatedAt?: string;
      roles?: components["schemas"]["RoleDTO"][];
      /** @description holidays request for a user */
      holidays?: components["schemas"]["HolidayRequestDTO"][];
      setting?: components["schemas"]["SettingDTO"];
      posts?: components["schemas"]["PostDTO"][];
    };
    RoleDTO: {
      /**
       * Format: uuid
       * @description identifier the role
       */
      id?: string;
      type?: components["schemas"]["USER_ROLE"];
      /** @description role description */
      description?: string;
    };
    ServiceDTO: {
      /**
       * Format: uuid
       * @description service identifier
       */
      id?: string;
      /** @description service name */
      name?: string;
      /** @description All the posts present in this service */
      posts?: components["schemas"]["PostDTO"][];
      /** @description service description */
      description?: string;
      /** @description describe if the service is active or not */
      isActive?: boolean;
      /**
       * Format: date-time
       * @description service creation date
       */
      createdAt?: string;
      /**
       * Format: date-time
       * @description service modification date
       */
      updatedAt?: string;
    };
    PostDTO: {
      /**
       * Format: uuid
       * @description service identifier
       */
      id?: string;
      /** @description service name */
      name?: string;
      /** @description department description */
      description?: string;
      service?: components["schemas"]["ServiceDTO"];
      /** @description describe if the post is active or not */
      isActive?: boolean;
      /**
       * Format: date-time
       * @description service creation date
       */
      createdAt?: string;
      /**
       * Format: date-time
       * @description service modification date
       */
      updatedAt?: string;
    };
    HolidayRequestDTO: {
      /**
       * Format: uuid
       * @description identifier the holiday id
       */
      id?: string;
      /** @description holiday request description */
      description?: string;
      /**
       * Format: date-time
       * @description user arriving date
       */
      startingDate?: string;
      /**
       * Format: date-time
       * @description user updating date
       */
      endingDate?: string;
      /**
       * Format: date-time
       * @description user updating date
       */
      returningDate?: string;
      holidayType?: components["schemas"]["HolidayTypeDTO"];
      employee?: components["schemas"]["EmployeeDTO"];
    };
    HolidayTypeDTO: {
      /**
       * Format: uuid
       * @description Holiday type identifier
       */
      id?: string;
      /** @description name of the holiday type */
      name?: string;
      /** @description an explanation and  maybe some condition and restrictions */
      description?: string;
    };
    SettingDTO: {
      /**
       * Format: uuid
       * @description identifier the setting
       */
      id?: string;
      /** @description default email notification which will be the company email */
      defaultEmailNotification?: string;
      /** @description another email notification chose by the user */
      customEmailNotification?: string;
    };
    /** @enum {string} */
    USER_ROLE: "ADMIN" | "EMPLOYEE" | "HUMAN_RESOURCE";
    /** @enum {string} */
    PERMISSIONS: "employee:create" | "employee:read" | "employee:edit";
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * add a new service
   * @description add a new service
   */
  createService: {
    /** @description Service object that need to be add */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ServiceDTO"];
      };
    };
    responses: {
      /** @description successful operation */
      201: {
        content: {
          "application/json": string;
        };
      };
      /** @description HOLIDAY-SERVICE-4001 */
      401: {
        content: never;
      };
      /** @description HOLIDAY-SERVICE-4009 */
      409: {
        content: never;
      };
    };
  };
  /**
   * activate a new service
   * @description activate a new service
   */
  activateServiceById: {
    parameters: {
      path: {
        /** @description service id to activate */
        id: string;
      };
    };
    responses: {
      /** @description successful operation */
      204: {
        content: never;
      };
      /** @description HOLIDAY-SERVICE-4004 */
      404: {
        content: never;
      };
      /** @description HOLIDAY-SERVICE-4009 */
      409: {
        content: never;
      };
    };
  };
  /**
   * deactivate a new service
   * @description deactivate a new service
   */
  deactivateServiceById: {
    parameters: {
      path: {
        /** @description service id to deactivate */
        id: string;
      };
    };
    responses: {
      /** @description successful operation */
      204: {
        content: never;
      };
      /** @description HOLIDAY-SERVICE-4004 */
      404: {
        content: never;
      };
      /** @description HOLIDAY-SERVICE-4009 */
      409: {
        content: never;
      };
    };
  };
  /**
   * get all services
   * @description get all services
   */
  getAllServices: {
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceDTO"][];
        };
      };
      /** @description HOLIDAY-SERVICE-4000 */
      400: {
        content: never;
      };
      /** @description HOLIDAY-SERVICE-4001 */
      401: {
        content: never;
      };
    };
  };
  /**
   * get a service
   * @description get an service
   */
  getServiceById: {
    parameters: {
      path: {
        /** @description service id to be fetch */
        id: string;
      };
    };
    responses: {
      /** @description successful operation */
      204: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description HOLIDAY-SERVICE-4000 */
      400: {
        content: never;
      };
      /** @description HOLIDAY-SERVICE-4001 */
      401: {
        content: never;
      };
    };
  };
  /**
   * update service
   * @description update service
   */
  updateService: {
    parameters: {
      path: {
        /** @description Service id to be update */
        id: string;
      };
    };
    /** @description Service object that need to be update */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ServiceDTO"];
      };
    };
    responses: {
      /** @description successful operation */
      204: {
        content: never;
      };
      /** @description HOLIDAY-SERVICE-4004 */
      404: {
        content: never;
      };
    };
  };
  /**
   * add a new post
   * @description add a new post
   */
  createPost: {
    /** @description Post object that need to be add */
    requestBody: {
      content: {
        "application/json": components["schemas"]["PostDTO"];
      };
    };
    responses: {
      /** @description successful operation */
      201: {
        content: {
          "application/json": string;
        };
      };
      /** @description HOLIDAY-POST-4001 */
      401: {
        content: never;
      };
      /** @description HOLIDAY-POST-4009 */
      409: {
        content: never;
      };
    };
  };
  /**
   * activate a new post
   * @description activate a new post
   */
  activatePostById: {
    parameters: {
      path: {
        /** @description post id to activate */
        id: string;
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: never;
      };
      /** @description HOLIDAY-POST-4001 */
      401: {
        content: never;
      };
      /** @description HOLIDAY-POST-4009 */
      409: {
        content: never;
      };
    };
  };
  /**
   * deactivate a new post
   * @description deactivate a new post
   */
  deactivatePostById: {
    parameters: {
      path: {
        /** @description post id to deactivate */
        id: string;
      };
    };
    responses: {
      /** @description successful operation */
      204: {
        content: never;
      };
      /** @description HOLIDAY-POST-4004 */
      404: {
        content: never;
      };
      /** @description HOLIDAY-POST-4009 */
      409: {
        content: never;
      };
    };
  };
  /**
   * get all posts
   * @description get all posts
   */
  getAllPosts: {
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["PostDTO"][];
        };
      };
      /** @description HOLIDAY-POST-4000 */
      400: {
        content: never;
      };
      /** @description HOLIDAY-POST-4001 */
      401: {
        content: never;
      };
    };
  };
  /**
   * get a post
   * @description get a post
   */
  getPostById: {
    parameters: {
      path: {
        /** @description post id to be fetch */
        id: string;
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description HOLIDAY-POST-4000 */
      400: {
        content: never;
      };
      /** @description HOLIDAY-POST-4001 */
      401: {
        content: never;
      };
    };
  };
  /**
   * update post
   * @description update post
   */
  updatePost: {
    parameters: {
      path: {
        /** @description Post id to be update */
        id: string;
      };
    };
    /** @description Post object that need to be update */
    requestBody: {
      content: {
        "application/json": components["schemas"]["PostDTO"];
      };
    };
    responses: {
      /** @description successful operation */
      204: {
        content: never;
      };
      /** @description HOLIDAY-POST-4004 */
      404: {
        content: never;
      };
    };
  };
  /**
   * add a new employee
   * @description add a new employee
   */
  createEmployee: {
    /** @description Employee object that need to be add */
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmployeeDTO"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description HOLIDAY-EMPLOYEE-4001 */
      401: {
        content: never;
      };
      /** @description HOLIDAY-EMPLOYEE-4009 */
      409: {
        content: never;
      };
    };
  };
  /**
   * get all employees
   * @description get all employees
   */
  getAllEmployees: {
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["EmployeeDTO"][];
        };
      };
      /** @description HOLIDAY-EMPLOYEE-4000 */
      400: {
        content: never;
      };
      /** @description HOLIDAY-EMPLOYEE-4001 */
      401: {
        content: never;
      };
    };
  };
  /**
   * get an employee
   * @description get an employee
   */
  getEmployeeById: {
    parameters: {
      path: {
        /** @description employee id to be fetch */
        id: string;
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description HOLIDAY-EMPLOYEE-4000 */
      400: {
        content: never;
      };
      /** @description HOLIDAY-EMPLOYEE-4001 */
      401: {
        content: never;
      };
    };
  };
  /**
   * update employee
   * @description update employee
   */
  updateEmployee: {
    parameters: {
      path: {
        /** @description Employee id to be update */
        id: string;
      };
    };
    /** @description Employee object that need to be update */
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmployeeDTO"];
      };
    };
    responses: {
      /** @description successful operation */
      204: {
        content: never;
      };
      /** @description HOLIDAY-EMPLOYEE-4004 */
      404: {
        content: never;
      };
    };
  };
  /**
   * add a new role
   * @description add a new role
   */
  createRole: {
    /** @description Role object that need to be add */
    requestBody: {
      content: {
        "application/json": components["schemas"]["RoleDTO"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description HOLIDAY-ROLE-4001 */
      401: {
        content: never;
      };
      /** @description HOLIDAY-ROLE-4009 */
      409: {
        content: never;
      };
    };
  };
  /**
   * get an role
   * @description get an role
   */
  getRoleById: {
    parameters: {
      path: {
        /** @description role id to be fetch */
        id: string;
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description HOLIDAY-ROLE-4000 */
      400: {
        content: never;
      };
      /** @description HOLIDAY-ROLE-4001 */
      401: {
        content: never;
      };
    };
  };
  /**
   * update role
   * @description update role
   */
  updateRole: {
    parameters: {
      path: {
        /** @description Role id to be update */
        id: string;
      };
    };
    /** @description Role object that need to be update */
    requestBody: {
      content: {
        "application/json": components["schemas"]["RoleDTO"];
      };
    };
    responses: {
      /** @description successful operation */
      204: {
        content: never;
      };
      /** @description HOLIDAY-ROLE-4004 */
      404: {
        content: never;
      };
    };
  };
  /**
   * get all roles
   * @description get all roles
   */
  getAllRoles: {
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["RoleDTO"][];
        };
      };
      /** @description HOLIDAY-ROLE-4000 */
      400: {
        content: never;
      };
      /** @description HOLIDAY-ROLE-4001 */
      401: {
        content: never;
      };
    };
  };
  /**
   * assign permissions to role
   * @description assign permissions to role
   */
  assignPermissionToRoleId: {
    parameters: {
      path: {
        /** @description post id to activate */
        id: string;
      };
    };
    /** @description List of permissions that need to be add to this role */
    requestBody: {
      content: {
        "application/json": components["schemas"]["RoleDTO"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: never;
      };
      /** @description HOLIDAY-POST-4001 */
      401: {
        content: never;
      };
      /** @description HOLIDAY-POST-4009 */
      409: {
        content: never;
      };
    };
  };
  /**
   * activate a new role
   * @description activate a new role
   */
  activateRoleById: {
    parameters: {
      path: {
        /** @description role id to activate */
        id: string;
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: never;
      };
      /** @description HOLIDAY-ROLE-4001 */
      401: {
        content: never;
      };
      /** @description HOLIDAY-ROLE-4009 */
      409: {
        content: never;
      };
    };
  };
  /**
   * deactivate a new role
   * @description deactivate a new role
   */
  deactivateRoleById: {
    parameters: {
      path: {
        /** @description role id to deactivate */
        id: string;
      };
    };
    responses: {
      /** @description successful operation */
      204: {
        content: never;
      };
      /** @description HOLIDAY-ROLE-4004 */
      404: {
        content: never;
      };
      /** @description HOLIDAY-ROLE-4009 */
      409: {
        content: never;
      };
    };
  };
  /**
   * create a new holiday request
   * @description create a new holiday request
   */
  createHolidayRequest: {
    /** @description holiday request object that need to be add */
    requestBody: {
      content: {
        "application/json": components["schemas"]["HolidayRequestDTO"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description HOLIDAY-REQUEST-4001 */
      401: {
        content: never;
      };
      /** @description HOLIDAY-REQUEST-4009 */
      409: {
        content: never;
      };
    };
  };
  /**
   * get an holiday request
   * @description get an holiday request
   */
  getHolidayRequestById: {
    parameters: {
      path: {
        /** @description holiday request id to be fetch */
        id: string;
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description HOLIDAY-REQUEST-4000 */
      400: {
        content: never;
      };
      /** @description HOLIDAY-REQUEST-4001 */
      401: {
        content: never;
      };
    };
  };
  /**
   * update holiday request
   * @description update holiday request
   */
  updateHolidayRequest: {
    parameters: {
      path: {
        /** @description Holiday Request id to be update */
        id: string;
      };
    };
    /** @description Holiday Request object that need to be update */
    requestBody: {
      content: {
        "application/json": components["schemas"]["HolidayRequestDTO"];
      };
    };
    responses: {
      /** @description successful operation */
      204: {
        content: never;
      };
      /** @description HOLIDAY-REQUEST-4004 */
      404: {
        content: never;
      };
    };
  };
  /**
   * get all holiday requests
   * @description get all holiday requests
   */
  getAllHolidayRequest: {
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["HolidayRequestDTO"][];
        };
      };
      /** @description HOLIDAY-REQUEST-4000 */
      400: {
        content: never;
      };
      /** @description HOLIDAY-REQUEST-4001 */
      401: {
        content: never;
      };
    };
  };
}
